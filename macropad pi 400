import time
import random
import adafruit_trellism4
import usb_hid
import neopixel
from adafruit_hid.keyboard import Keyboard
from adafruit_hid.keycode import Keycode

time.sleep(5)
trellis = adafruit_trellism4.TrellisM4Express(rotation=0)

trellis.pixels.brightness = 1
time.sleep(1/100)
trellis.pixels[(0,0)] = (20,0,0)
time.sleep(1/100)
trellis.pixels[(0,1)] = (20,0,0)
time.sleep(1/100)
trellis.pixels[(0,2)] = (5,5,5)
time.sleep(1/100)
trellis.pixels[(0,3)] = (5,40,5)
time.sleep(1/100)
for i in range(1,8):
    time.sleep(i/100)
    trellis.pixels[(i,0)] = (0,10,20)
    trellis.pixels[(i,2)] = (0,10,20)
    trellis.pixels[(8-i,1)] = (20,5,5)
    trellis.pixels[(8-i,3)] = (20,5,5)



keycodes = [Keycode.ONE,       Keycode.Q, Keycode.W, Keycode.E, Keycode.R, Keycode.T, Keycode.Y, Keycode.U,
            Keycode.TWO,       Keycode.Q, Keycode.W, Keycode.E, Keycode.R, Keycode.T, Keycode.Y, Keycode.U,
            Keycode.CAPS_LOCK, Keycode.I, Keycode.O, Keycode.P, Keycode.A, Keycode.S, Keycode.D, Keycode.F, 
            Keycode.SPACE,     Keycode.I, Keycode.O, Keycode.P, Keycode.A, Keycode.S, Keycode.D, Keycode.F,]

keycodestwo = [Keycode.ONE,    Keycode.G, Keycode.H, Keycode.J, Keycode.K, Keycode.L, Keycode.Z, Keycode.X, 
            Keycode.TWO,       Keycode.G, Keycode.H, Keycode.J, Keycode.K, Keycode.L, Keycode.Z, Keycode.X, 
            Keycode.CAPS_LOCK, Keycode.C, Keycode.V, Keycode.B, Keycode.N, Keycode.M, Keycode.Q, Keycode.W, 
            Keycode.SPACE,     Keycode.C, Keycode.V, Keycode.B, Keycode.N, Keycode.M, Keycode.Q, Keycode.W]


coo = [(0,0), (1,0), (2,0), (3,0), (4,0), (5,0), (6,0), (7,0),
       (0,1), (1,1), (2,1), (3,1), (4,1), (5,1), (6,1), (7,1),
       (0,2), (1,2), (2,2), (3,2), (4,2), (5,2), (6,2), (7,2),
       (0,3), (1,3), (2,3), (3,3), (4,3), (5,3), (6,3), (7,3),]

kbd = Keyboard(usb_hid.devices)

previous_down = set()  # create an empty set to hold the previous state of the pressed keys
switched = False
while True:
    down = set(trellis.pressed_keys)
    if len(down) > 1:  # check if more than one button is currently pressed
        continue  # skip the rest of the loop until all buttons are released
    elif len(down) == 1:  # check if exactly one button is currently pressed
        for i in range(32):
            if coo[i] in down and coo[i] not in previous_down:  # check if the button is currently pressed and was not pressed in the previous iteration
                if coo[i] == (0,2):
                    if switched:
                        switched = False
                        trellis.pixels[(0,2)] = (10,10,10)
                    else:
                        switched = True
                        trellis.pixels[(0,2)] = (35,35,35)
                elif coo[i][0] > 0:
                    if coo[i][1] == 1 or coo[i][1] == 3:
                        if switched:
                            kbd.press(keycodestwo[i], Keycode.SHIFT)
                            kbd.release(keycodestwo[i], Keycode.SHIFT)
                        else:
                            kbd.press(keycodes[i], Keycode.SHIFT)
                            kbd.release(keycodes[i], Keycode.SHIFT)
                    else:
                        if switched:
                            kbd.press(keycodestwo[i])
                            kbd.release(keycodestwo[i])
                        else:
                            kbd.press(keycodes[i])
                            kbd.release(keycodes[i])

                else:
                    kbd.press(keycodes[i])
                    kbd.release(keycodes[i])
        previous_down = down.copy()  # update the previous state of the pressed keys with a copy of the current state
    else:
        previous_down = set()  # clear previous_down if no buttons are currently pressed

